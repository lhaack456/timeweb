#!/bin/bash

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 <app-name>"
  exit 1
fi

if [[ -e $1 ]]; then
  read -p "$1 already exists. Do you want to overwrite (y/n)? " ans
  if [[ $ans == "y" ]]; then
    rm -rf $1
  else
    exit 1
  fi
fi

logfile=.makeflask.log
libs="Flask requests SQLAlchemy Flask-SQLAlchemy"
appname=$1

echo "Creating Flask app '$appname'."
echo "Any errors will be stored in $logfile."
echo ""

mkdir $appname >$logfile 2>&1
cd $appname >$logfile 2>&1
echo "Creating virtual environment in $appname/env."
python3 -m venv env >$logfile 2>&1

env_root=env/bin
if [[ -e env/Scripts ]]; then
    env_root=env/Scripts
fi
cat >.env <<ENV_EOF
source $env_root/activate
export FLASK_PORT=5000
export FLASK_ENV=development
ENV_EOF

echo "Installing Python libraries: $libs"
source .env >$logfile 2>&1
pip install $libs >$logfile 2>&1

echo "Creating application skeleton."
echo ""
echo "$appname/"
echo " └─ app.py"
cat >app.py <<SERVER_EOF
from flask import Flask, render_template, request, session, redirect, url_for, jsonify, abort
from flask_sqlalchemy import SQLAlchemy
import os 

app = Flask(__name__)
app.secret_key = 'REPLACE_ME_WITH_RANDOM_CHARACTERS'

db_name = 'test.db'
sqlite_uri = f'sqlite:///{os.path.abspath(os.path.curdir)}/{db_name}'
app.config['SQLALCHEMY_DATABASE_URI'] = sqlite_uri
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

from models import User

with app.app_context():
    db.create_all()

@app.route('/')
def index():
    return 'Results of GET /'
SERVER_EOF

echo " └─ appclient.py"
cat >appclient.py <<CLIENT_EOF
import requests
import os

port = os.environ['FLASK_PORT']
if not port:
    port = 5000

r = requests.get(f'http://localhost:{port}/')
'''
r = requests.post(
    f'http://localhost:{port}/',
    data={}
)
r = requests.post(
    f'http://localhost:{port}/',
    json={}
)
'''
print(r.text)
CLIENT_EOF

echo " └─ models.py"
cat >models.py <<MODELS_EOF
# Set up the DB using the following commands:
# $ python
# > from app import db
# > db.create_all()
# > from models import User
# > admin = User(username='admin', email='admin@example.com')
# > db.session.add(admin)
# > db.session.commit()
# > User.query.all()

from app import db                                                        

# Example class
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=False, nullable=False)

    def __repr__(self):
        return '<User %r>' % self.username
MODELS_EOF


echo " └─ templates/"
mkdir templates
echo " └─ static/"
echo "    └─ js/"
mkdir -p static/js
mkdir static/css
echo "    └─ css/"
mkdir static/img
echo "    └─ img/"

echo ""
echo "$appname created. To get started,"
echo "cd $appname && source .env"
echo "Then, to run your app,"
echo "flask run"

rm -f $logfile

